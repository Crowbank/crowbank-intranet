"""Refactor BoardingRun to use RunType FK, remove BoardingType enum, and ensure run_types model/table alignment

Revision ID: 55365d6fefb9
Revises: 7ea93a66e5fa
Create Date: 2025-06-06 22:38:16.666435

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '55365d6fefb9'
down_revision: Union[str, None] = '7ea93a66e5fa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('booking_intents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('arrival_date', sa.Date(), nullable=False),
    sa.Column('departure_date', sa.Date(), nullable=False),
    sa.Column('arrival_period', sa.Enum('AM', 'PM', name='dayperiod'), nullable=True),
    sa.Column('departure_period', sa.Enum('AM', 'PM', name='dayperiod'), nullable=True),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('destination', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('OPEN', 'APPROVED', 'REJECTED', 'WAIT_LIST', 'DUPLICATE', 'CANCELLED', name='bookingintentstatus'), nullable=False),
    sa.Column('status_notes', sa.Text(), nullable=True),
    sa.Column('auto_approved', sa.Boolean(), nullable=False),
    sa.Column('gravity_form_id', sa.Integer(), nullable=True),
    sa.Column('gravity_entry_id', sa.Integer(), nullable=True),
    sa.Column('form_submission_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('duplicate_of_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('handled_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['duplicate_of_id'], ['booking_intents.id'], ),
    sa.ForeignKeyConstraint(['form_submission_id'], ['form_submissions.id'], ),
    sa.ForeignKeyConstraint(['handled_by_id'], ['employees.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('booking_intent_pets',
    sa.Column('booking_intent_id', sa.Integer(), nullable=False),
    sa.Column('pet_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['booking_intent_id'], ['booking_intents.id'], ),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], ),
    sa.PrimaryKeyConstraint('booking_intent_id', 'pet_id')
    )
    op.alter_column('bookings', 'status',
               existing_type=postgresql.ENUM('PENDING', 'CONFIRMED', 'CHECKED_IN', 'CHECKED_OUT', 'CANCELLED', 'NO_SHOW', name='new_bookingstatus'),
               type_=sa.Enum('PENDING', 'CONFIRMED', 'CHECKED_IN', 'CHECKED_OUT', 'CANCELLED', 'NO_SHOW', name='bookingstatus'),
               existing_nullable=False)
    op.alter_column('bookings', 'boarding_type',
               existing_type=postgresql.ENUM('STANDARD', 'DELUXE', 'CATTERY', 'DAYCARE', name='new_boardingtype2'),
               type_=sa.Enum('STANDARD', 'DELUXE', 'CATTERY', 'DAYCARE', name='boardingtype'),
               existing_nullable=False)
    op.add_column('contacts', sa.Column('phone_alt', sa.String(length=30), nullable=True))
    op.add_column('contacts', sa.Column('email_alt', sa.String(length=255), nullable=True))
    op.alter_column('contacts', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('contacts', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.drop_constraint('contacts_email_address_key', 'contacts', type_='unique')
    op.drop_index('ix_contacts_legacy_contact_no_unique', table_name='contacts', postgresql_where='(legacy_contact_no IS NOT NULL)')
    op.create_unique_constraint(None, 'contacts', ['legacy_contact_no'])
    op.drop_column('contacts', 'street')
    op.drop_column('contacts', 'town')
    op.drop_column('contacts', 'postcode')
    op.alter_column('customer_contacts', 'role',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PRIMARY', 'SECONDARY', 'EMERGENCY', name='contactrole'),
               existing_nullable=False)
    op.alter_column('form_fields', 'field_type',
               existing_type=postgresql.ENUM('TEXT', 'TEXTAREA', 'NUMBER', 'DATE', 'SELECT', 'MULTISELECT', 'CHECKBOX', 'RADIO', 'FILE', 'EMAIL', 'PHONE', 'ADDRESS', name='new_fieldtype'),
               type_=sa.Enum('TEXT', 'TEXTAREA', 'NUMBER', 'DATE', 'SELECT', 'MULTISELECT', 'CHECKBOX', 'RADIO', 'FILE', 'EMAIL', 'PHONE', 'ADDRESS', name='fieldtype'),
               existing_nullable=False)
    op.alter_column('form_submissions', 'entity_type',
               existing_type=postgresql.ENUM('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='new_entitytype'),
               type_=sa.Enum('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='entitytype'),
               existing_nullable=False)
    op.alter_column('form_templates', 'type',
               existing_type=postgresql.ENUM('NEW_DOG_QUESTIONNAIRE', 'DAYCARE_APPLICATION', 'PUPPY_CLASS_REGISTRATION', 'CHECKIN_FORM', 'BOOKING_INTENT', 'EMPLOYEE_STARTER', name='new_formtype'),
               type_=sa.Enum('NEW_DOG_QUESTIONNAIRE', 'DAYCARE_APPLICATION', 'PUPPY_CLASS_REGISTRATION', 'CHECKIN_FORM', 'BOOKING_INTENT', 'EMPLOYEE_STARTER', name='formtype'),
               existing_nullable=False)
    op.alter_column('form_templates', 'entity_type',
               existing_type=postgresql.ENUM('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='new_entitytype'),
               type_=sa.Enum('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='entitytype'),
               existing_nullable=False)
    op.alter_column('media_files', 'type',
               existing_type=postgresql.ENUM('PHOTO', 'VIDEO', name='new_mediatype'),
               type_=sa.Enum('PHOTO', 'VIDEO', name='mediatype'),
               existing_nullable=False)
    op.alter_column('pet_documents', 'type',
               existing_type=postgresql.ENUM('VACCINATION', 'INSTRUCTIONS', 'MEDICATION_SHEET', 'VET_VISIT_SHEET', 'OTHER', name='new_documenttype'),
               type_=sa.Enum('VACCINATION', 'INSTRUCTIONS', 'MEDICATION_SHEET', 'VET_VISIT_SHEET', 'OTHER', name='documenttype'),
               existing_nullable=False)
    op.add_column('service_rates', sa.Column('category_legacy', sa.Integer(), nullable=True))
    op.alter_column('service_rates', 'category',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_index('ix_services_legacy_service_id', table_name='services')
    op.drop_column('services', 'legacy_service_id')
    op.add_column('vets', sa.Column('practice_name', sa.String(length=100), nullable=False))
    op.add_column('vets', sa.Column('website', sa.String(length=200), nullable=True))
    op.drop_column('vets', 'name')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vets', sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.drop_column('vets', 'website')
    op.drop_column('vets', 'practice_name')
    op.add_column('services', sa.Column('legacy_service_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index('ix_services_legacy_service_id', 'services', ['legacy_service_id'], unique=False)
    op.alter_column('service_rates', 'category',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.drop_column('service_rates', 'category_legacy')
    op.alter_column('pet_documents', 'type',
               existing_type=sa.Enum('VACCINATION', 'INSTRUCTIONS', 'MEDICATION_SHEET', 'VET_VISIT_SHEET', 'OTHER', name='documenttype'),
               type_=postgresql.ENUM('VACCINATION', 'INSTRUCTIONS', 'MEDICATION_SHEET', 'VET_VISIT_SHEET', 'OTHER', name='new_documenttype'),
               existing_nullable=False)
    op.alter_column('media_files', 'type',
               existing_type=sa.Enum('PHOTO', 'VIDEO', name='mediatype'),
               type_=postgresql.ENUM('PHOTO', 'VIDEO', name='new_mediatype'),
               existing_nullable=False)
    op.alter_column('form_templates', 'entity_type',
               existing_type=sa.Enum('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='entitytype'),
               type_=postgresql.ENUM('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='new_entitytype'),
               existing_nullable=False)
    op.alter_column('form_templates', 'type',
               existing_type=sa.Enum('NEW_DOG_QUESTIONNAIRE', 'DAYCARE_APPLICATION', 'PUPPY_CLASS_REGISTRATION', 'CHECKIN_FORM', 'BOOKING_INTENT', 'EMPLOYEE_STARTER', name='formtype'),
               type_=postgresql.ENUM('NEW_DOG_QUESTIONNAIRE', 'DAYCARE_APPLICATION', 'PUPPY_CLASS_REGISTRATION', 'CHECKIN_FORM', 'BOOKING_INTENT', 'EMPLOYEE_STARTER', name='new_formtype'),
               existing_nullable=False)
    op.alter_column('form_submissions', 'entity_type',
               existing_type=sa.Enum('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='entitytype'),
               type_=postgresql.ENUM('PET', 'BOOKING', 'CUSTOMER', 'EMPLOYEE', name='new_entitytype'),
               existing_nullable=False)
    op.alter_column('form_fields', 'field_type',
               existing_type=sa.Enum('TEXT', 'TEXTAREA', 'NUMBER', 'DATE', 'SELECT', 'MULTISELECT', 'CHECKBOX', 'RADIO', 'FILE', 'EMAIL', 'PHONE', 'ADDRESS', name='fieldtype'),
               type_=postgresql.ENUM('TEXT', 'TEXTAREA', 'NUMBER', 'DATE', 'SELECT', 'MULTISELECT', 'CHECKBOX', 'RADIO', 'FILE', 'EMAIL', 'PHONE', 'ADDRESS', name='new_fieldtype'),
               existing_nullable=False)
    op.alter_column('customer_contacts', 'role',
               existing_type=sa.Enum('PRIMARY', 'SECONDARY', 'EMERGENCY', name='contactrole'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.add_column('contacts', sa.Column('postcode', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('contacts', sa.Column('town', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('contacts', sa.Column('street', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'contacts', type_='unique')
    op.create_index('ix_contacts_legacy_contact_no_unique', 'contacts', ['legacy_contact_no'], unique=True, postgresql_where='(legacy_contact_no IS NOT NULL)')
    op.create_unique_constraint('contacts_email_address_key', 'contacts', ['email_address'])
    op.alter_column('contacts', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('contacts', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_column('contacts', 'email_alt')
    op.drop_column('contacts', 'phone_alt')
    op.alter_column('bookings', 'boarding_type',
               existing_type=sa.Enum('STANDARD', 'DELUXE', 'CATTERY', 'DAYCARE', name='boardingtype'),
               type_=postgresql.ENUM('STANDARD', 'DELUXE', 'CATTERY', 'DAYCARE', name='new_boardingtype2'),
               existing_nullable=False)
    op.alter_column('bookings', 'status',
               existing_type=sa.Enum('PENDING', 'CONFIRMED', 'CHECKED_IN', 'CHECKED_OUT', 'CANCELLED', 'NO_SHOW', name='bookingstatus'),
               type_=postgresql.ENUM('PENDING', 'CONFIRMED', 'CHECKED_IN', 'CHECKED_OUT', 'CANCELLED', 'NO_SHOW', name='new_bookingstatus'),
               existing_nullable=False)
    op.drop_table('booking_intent_pets')
    op.drop_table('booking_intents')
    # ### end Alembic commands ###
